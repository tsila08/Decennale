<?php

namespace Proxies\__CG__\Abi\RoutineBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AbsCommentaire extends \Abi\RoutineBundle\Entity\AbsCommentaire implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array('commentRef' => NULL, 'commentCivilite' => NULL, 'commentPrenom' => NULL, 'commentNom' => NULL, 'commentEmail' => NULL, 'commentText' => NULL, 'commentEtat' => NULL, 'commentDate' => NULL, 'commentNote' => NULL);



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->commentRef, $this->commentCivilite, $this->commentPrenom, $this->commentNom, $this->commentEmail, $this->commentText, $this->commentEtat, $this->commentDate, $this->commentNote);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', array($name));

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', array($name, $value));

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', array($name));

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'commentId', 'commentRef', 'commentCivilite', 'commentPrenom', 'commentNom', 'commentEmail', 'commentText', 'commentEtat', 'commentDate', 'commentNote');
        }

        return array('__isInitialized__', 'commentId');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AbsCommentaire $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->commentRef, $this->commentCivilite, $this->commentPrenom, $this->commentNom, $this->commentEmail, $this->commentText, $this->commentEtat, $this->commentDate, $this->commentNote);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setCommentRef($commentRef)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentRef', array($commentRef));

        return parent::setCommentRef($commentRef);
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentEtat($commentEtat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentEtat', array($commentEtat));

        return parent::setCommentEtat($commentEtat);
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentDate($commentDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentDate', array($commentDate));

        return parent::setCommentDate($commentDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentDate', array());

        return parent::getCommentDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getCommentId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentId', array());

        return parent::getCommentId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentRef()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentRef', array());

        return parent::getCommentRef();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentCivilite($commentCivilite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentCivilite', array($commentCivilite));

        return parent::setCommentCivilite($commentCivilite);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentCivilite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentCivilite', array());

        return parent::getCommentCivilite();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentPrenom($commentPrenom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentPrenom', array($commentPrenom));

        return parent::setCommentPrenom($commentPrenom);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentPrenom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentPrenom', array());

        return parent::getCommentPrenom();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentNom($commentNom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentNom', array($commentNom));

        return parent::setCommentNom($commentNom);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentNom', array());

        return parent::getCommentNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentEmail($commentEmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentEmail', array($commentEmail));

        return parent::setCommentEmail($commentEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentEmail', array());

        return parent::getCommentEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentText($commentText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentText', array($commentText));

        return parent::setCommentText($commentText);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentText', array());

        return parent::getCommentText();
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentEtat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentEtat', array());

        return parent::getCommentEtat();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentNote($commentNote)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentNote', array($commentNote));

        return parent::setCommentNote($commentNote);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentNote()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentNote', array());

        return parent::getCommentNote();
    }

}
